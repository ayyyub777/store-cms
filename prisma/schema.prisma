generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(uuid())
    name          String
    email         String?   @unique
    password      String?
    emailVerified DateTime? @map("email_verified")
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]

    stores Store[] @relation("UserToStore")

    @@map("users")
}

model Account {
    id                String   @id @default(cuid())
    userId            String   @map("user_id")
    type              String?
    provider          String
    providerAccountId String   @map("provider_account_id")
    token_type        String?
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    scope             String?
    id_token          String?  @db.Text
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    userId       String?  @map("user_id")
    sessionToken String   @unique @map("session_token") @db.Text
    accessToken  String?  @map("access_token") @db.Text
    expires      DateTime
    user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@map("sessions")
}

model VerificationRequest {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
}

model Store {
    id        String   @id @default(uuid())
    name      String
    logo      String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String

    user       User        @relation("UserToStore", fields: [userId], references: [id])
    products   Product[]   @relation("StoreToProduct")
    billboards Billboard[] @relation("StoreToBillboard")
    categories Category[]  @relation("StoreToCategory")
    sizes      Size[]      @relation("StoreToSize")
    colors     Color[]     @relation("StoreToColor")
    orders     Order[]     @relation("StoreToOrder")

    @@index([userId])
}

model Product {
    id         String      @id @default(uuid())
    storeId    String
    store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])
    categoryId String
    category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
    name       String
    price      Decimal
    isFeatured Boolean     @default(false)
    isArchived Boolean     @default(false)
    sizeId     String
    size       Size        @relation(fields: [sizeId], references: [id])
    colorId    String
    color      Color       @relation(fields: [colorId], references: [id])
    images     Image[]
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    OrderItem  OrderItem[]

    @@index([storeId])
    @@index([categoryId])
    @@index([sizeId])
    @@index([colorId])
}

model Billboard {
    id        String     @id @default(uuid())
    storeId   String
    store     Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
    label     String
    imageUrl  String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    Category  Category[]

    @@index([storeId])
}

model Category {
    id          String    @id @default(uuid())
    storeId     String
    store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
    billboardId String
    billboard   Billboard @relation(fields: [billboardId], references: [id])
    name        String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    products    Product[] @relation("CategoryToProduct")

    @@index([storeId])
    @@index([billboardId])
}

model Size {
    id        String    @id @default(uuid())
    storeId   String
    store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
    name      String
    value     String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Product   Product[]

    @@index([storeId])
}

model Color {
    id        String    @id @default(uuid())
    storeId   String
    store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
    name      String
    value     String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Product   Product[]

    @@index([storeId])
}

model Image {
    id        String   @id @default(uuid())
    productId String
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    url       String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([productId])
}

model Order {
    id         String      @id @default(uuid())
    storeId    String // Foreign Key to Store
    store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
    orderItems OrderItem[] // Relation to OrderItem model
    isPaid     Boolean     @default(false)
    phone      String      @default("")
    address    String      @default("")
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt

    @@index([storeId])
}

model OrderItem {
    id        String  @id @default(uuid())
    orderId   String // Foreign Key to Order
    order     Order   @relation(fields: [orderId], references: [id])
    productId String // Foreign Key to Product
    product   Product @relation(fields: [productId], references: [id])

    @@index([orderId])
    @@index([productId])
}
